"use strict";(self.webpackChunkmy_docusaurus_website=self.webpackChunkmy_docusaurus_website||[]).push([[4446],{7172:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>c,frontMatter:()=>t,metadata:()=>d,toc:()=>l});var r=a(4848),i=a(8453);const t={sidebar_position:4},s="Riverpod",d={id:"pemrograman-mobile-lanjut/riverpod",title:"Riverpod",description:"Riverpod adalah library untuk state management dalam Flutter yang menawarkan cara yang lebih terstruktur dan fleksibel untuk mengelola state dibandingkan dengan pendekatan tradisional seperti Provider. Tiga komponen utama dalam Riverpod adalah Providers, Consumers, dan Notifiers. Berikut penjelasan rinci mengenai masing-masing komponen:",source:"@site/docs/pemrograman-mobile-lanjut/riverpod.md",sourceDirName:"pemrograman-mobile-lanjut",slug:"/pemrograman-mobile-lanjut/riverpod",permalink:"/docs/pemrograman-mobile-lanjut/riverpod",draft:!1,unlisted:!1,editUrl:"https://github.com/khanifzyen/my-docusaurus-website/tree/master/docs/pemrograman-mobile-lanjut/riverpod.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Mengapa Cloning Aplikasi",permalink:"/docs/pemrograman-mobile-lanjut/mengapa-cloning-aplikasi"},next:{title:"Riverpod Generator",permalink:"/docs/pemrograman-mobile-lanjut/riverpod-generator"}},o={},l=[{value:"1. Providers",id:"1-providers",level:2},{value:"2. Consumers",id:"2-consumers",level:2},{value:"3. Notifiers",id:"3-notifiers",level:2},{value:"Kesimpulan",id:"kesimpulan",level:2}];function u(e){const n={code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"riverpod",children:"Riverpod"}),"\n",(0,r.jsxs)(n.p,{children:["Riverpod adalah library untuk state management dalam Flutter yang menawarkan cara yang lebih terstruktur dan fleksibel untuk mengelola state dibandingkan dengan pendekatan tradisional seperti ",(0,r.jsx)(n.code,{children:"Provider"}),". Tiga komponen utama dalam Riverpod adalah Providers, Consumers, dan Notifiers. Berikut penjelasan rinci mengenai masing-masing komponen:"]}),"\n",(0,r.jsx)(n.h2,{id:"1-providers",children:"1. Providers"}),"\n",(0,r.jsx)(n.p,{children:"Providers adalah dasar dari Riverpod. Mereka bertanggung jawab untuk menghasilkan dan menyediakan data yang dapat diakses oleh widget lain dalam aplikasi. Ada beberapa jenis providers, masing-masing dengan tujuan yang berbeda:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Provider:"})," Digunakan untuk membuat nilai yang tidak berubah (immutable) selama aplikasi berjalan. Contoh penggunaannya adalah menyediakan konfigurasi atau konstanta."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"final configProvider = Provider<Config>((ref) => Config());\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"StateProvider:"})," Digunakan untuk membuat state sederhana yang dapat diubah (mutable). Cocok untuk state yang tidak memerlukan logika bisnis yang kompleks."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"final counterProvider = StateProvider<int>((ref) => 0);\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"FutureProvider:"})," Digunakan untuk mengelola state asinkron yang berasal dari operasi masa depan (future), seperti memuat data dari API."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"final dataProvider = FutureProvider<Data>((ref) async {\r\n  return fetchDataFromApi();\r\n});\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"StreamProvider:"})," Digunakan untuk mengelola state yang berasal dari stream. Cocok untuk data yang terus menerus diperbarui, seperti koneksi WebSocket."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"final streamProvider = StreamProvider<Data>((ref) {\r\n  return dataStream();\r\n});\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"2-consumers",children:"2. Consumers"}),"\n",(0,r.jsx)(n.p,{children:"Consumers adalah cara untuk mengakses data yang disediakan oleh providers di dalam widget. Consumers memungkinkan widget untuk bereaksi terhadap perubahan data yang disediakan oleh providers."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Consumer Widget:"})," ",(0,r.jsx)(n.code,{children:"Consumer"})," widget digunakan untuk memisahkan logika build dari widget utama. Ini memudahkan pengelolaan rebuild secara lebih efisien."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"class CounterWidget extends ConsumerWidget {\r\n  @override\r\n  Widget build(BuildContext context, WidgetRef ref) {\r\n    final counter = ref.watch(counterProvider);\r\n    return Text('Counter: $counter');\r\n  }\r\n}\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"ref.read:"})," Digunakan untuk membaca nilai provider tanpa mendengarkan perubahan."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"void incrementCounter(WidgetRef ref) {\r\n  ref.read(counterProvider.notifier).state++;\r\n}\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"ref.watch:"})," Digunakan untuk membaca dan mendengarkan perubahan pada provider. Setiap kali nilai provider berubah, widget akan dibangun ulang."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"@override\r\nWidget build(BuildContext context, WidgetRef ref) {\r\n  final counter = ref.watch(counterProvider);\r\n  return Text('Counter: $counter');\r\n}\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"3-notifiers",children:"3. Notifiers"}),"\n",(0,r.jsx)(n.p,{children:"Notifiers adalah bagian dari Riverpod yang memungkinkan pengelolaan state yang lebih kompleks dan interaktif. Mereka adalah kelas yang memungkinkan Anda untuk memodifikasi state dan mengelola logika bisnis."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"StateNotifier:"})," Kelas dasar untuk mengelola state. Anda membuat kelas yang memperluas ",(0,r.jsx)(n.code,{children:"StateNotifier"})," dan mengontrol bagaimana state diubah."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"class CounterNotifier extends StateNotifier<int> {\r\n  CounterNotifier() : super(0);\r\n\r\n  void increment() {\r\n    state++;\r\n  }\r\n}\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"StateNotifierProvider:"})," Digunakan untuk menyediakan instance dari ",(0,r.jsx)(n.code,{children:"StateNotifier"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"final counterNotifierProvider = StateNotifierProvider<CounterNotifier, int>((ref) {\r\n  return CounterNotifier();\r\n});\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Usage in Widget:"})," Menggunakan ",(0,r.jsx)(n.code,{children:"StateNotifier"})," dalam widget dengan ",(0,r.jsx)(n.code,{children:"Consumer"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-dart",children:"class CounterWidget extends ConsumerWidget {\r\n  @override\r\n  Widget build(BuildContext context, WidgetRef ref) {\r\n    final counter = ref.watch(counterNotifierProvider);\r\n    final counterNotifier = ref.read(counterNotifierProvider.notifier);\r\n\r\n    return Column(\r\n      children: [\r\n        Text('Counter: $counter'),\r\n        ElevatedButton(\r\n          onPressed: counterNotifier.increment,\r\n          child: Text('Increment'),\r\n        ),\r\n      ],\r\n    );\r\n  }\r\n}\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"kesimpulan",children:"Kesimpulan"}),"\n",(0,r.jsx)(n.p,{children:"Riverpod menyediakan cara yang fleksibel dan terstruktur untuk mengelola state dalam aplikasi Flutter. Dengan memanfaatkan Providers untuk menyediakan data, Consumers untuk mengakses data, dan Notifiers untuk mengelola state yang kompleks, Riverpod membantu menciptakan aplikasi yang lebih modular, dapat di-maintain, dan efisien."})]})}function c(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>s,x:()=>d});var r=a(6540);const i={},t=r.createContext(i);function s(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);