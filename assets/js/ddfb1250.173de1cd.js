"use strict";(self.webpackChunkmy_docusaurus_website=self.webpackChunkmy_docusaurus_website||[]).push([[6385],{4732:(r,e,n)=>{n.r(e),n.d(e,{assets:()=>u,contentTitle:()=>d,default:()=>l,frontMatter:()=>i,metadata:()=>s,toc:()=>o});var t=n(4848),a=n(8453);const i={sidebar_position:5},d="Riverpod Generator",s={id:"pemrograman-mobile-lanjut/riverpod-generator",title:"Riverpod Generator",description:"Riverpod Generator adalah alat yang membantu mengotomatisasi pembuatan provider dalam Riverpod, sebuah state management library untuk Flutter. Ini memungkinkan kita untuk menulis provider dengan lebih sedikit boilerplate code menggunakan anotasi.",source:"@site/docs/pemrograman-mobile-lanjut/riverpod-generator.md",sourceDirName:"pemrograman-mobile-lanjut",slug:"/pemrograman-mobile-lanjut/riverpod-generator",permalink:"/docs/pemrograman-mobile-lanjut/riverpod-generator",draft:!1,unlisted:!1,editUrl:"https://github.com/khanifzyen/my-docusaurus-website/tree/master/docs/pemrograman-mobile-lanjut/riverpod-generator.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Riverpod",permalink:"/docs/pemrograman-mobile-lanjut/riverpod"},next:{title:"Pembuatan Fitur Auth",permalink:"/docs/pemrograman-mobile-lanjut/pembuatan-fitur-auth"}},u={},o=[{value:"Studi Kasus: Shopping Cart",id:"studi-kasus-shopping-cart",level:2},{value:"Diagram Alur Proses Shopping Cart",id:"diagram-alur-proses-shopping-cart",level:3},{value:"Diagram Alur Proses Coding Shopping Cart",id:"diagram-alur-proses-coding-shopping-cart",level:3},{value:"1. Tambah Package yang diperlukan",id:"1-tambah-package-yang-diperlukan",level:3},{value:"2. Buat class model Product",id:"2-buat-class-model-product",level:3},{value:"3. Jalankan dart run build_runner watch",id:"3-jalankan-dart-run-build_runner-watch",level:3},{value:"4. Buat data product dummy",id:"4-buat-data-product-dummy",level:3},{value:"5. Buat sealed class result",id:"5-buat-sealed-class-result",level:3},{value:"6. Buat chart provider",id:"6-buat-chart-provider",level:3},{value:"7. Buat product list page",id:"7-buat-product-list-page",level:3},{value:"8. Buat chart page",id:"8-buat-chart-page",level:3},{value:"9. Ubah main.dart",id:"9-ubah-maindart",level:3}];function c(r){const e={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...r.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h1,{id:"riverpod-generator",children:"Riverpod Generator"}),"\n",(0,t.jsx)(e.p,{children:"Riverpod Generator adalah alat yang membantu mengotomatisasi pembuatan provider dalam Riverpod, sebuah state management library untuk Flutter. Ini memungkinkan kita untuk menulis provider dengan lebih sedikit boilerplate code menggunakan anotasi."}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.code,{children:"AsyncNotifierProvider"})," adalah jenis provider yang digunakan untuk mengelola state asynchronous. Ini sangat berguna untuk operasi yang memerlukan waktu, seperti mengambil data dari API atau database."]}),"\n",(0,t.jsxs)(e.p,{children:["Dengan menggunakan anotasi ",(0,t.jsx)(e.code,{children:"@riverpod"}),", kita dapat membuat ",(0,t.jsx)(e.code,{children:"AsyncNotifierProvider"})," dengan lebih mudah. Berikut adalah beberapa poin penting:"]}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsxs)(e.li,{children:["Anotasi ",(0,t.jsx)(e.code,{children:"@riverpod"})," ditempatkan di atas class yang meng-",(0,t.jsx)(e.code,{children:"extend AsyncNotifier"}),"."]}),"\n",(0,t.jsxs)(e.li,{children:["Class tersebut harus memiliki method ",(0,t.jsx)(e.code,{children:"build()"})," yang mengembalikan ",(0,t.jsx)(e.code,{children:"Future"})," dari tipe state yang dikelola."]}),"\n",(0,t.jsx)(e.li,{children:"Kita dapat menambahkan method lain untuk memodifikasi state."}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"studi-kasus-shopping-cart",children:"Studi Kasus: Shopping Cart"}),"\n",(0,t.jsxs)(e.p,{children:["Sekarang, mari kita buat contoh studi kasus untuk keranjang produk menggunakan ",(0,t.jsx)(e.code,{children:"Freezed"})," untuk model ",(0,t.jsx)(e.code,{children:"Product"})," dan json_annotation untuk serialisasi JSON."]}),"\n",(0,t.jsx)(e.h3,{id:"diagram-alur-proses-shopping-cart",children:"Diagram Alur Proses Shopping Cart"}),"\n",(0,t.jsx)(e.mermaid,{value:'graph TD\r\n    A[Start] --\x3e B[Open App]\r\n    B --\x3e C[ProductListScreen]\r\n    C --\x3e D{User Action}\r\n    D --\x3e|View Products| C\r\n    D --\x3e|Add to Cart| E[Update CartProvider]\r\n    E --\x3e F[Update Cart Badge]\r\n    F --\x3e C\r\n    D --\x3e|Adjust Quantity| G[Update CartProvider]\r\n    G --\x3e F\r\n    D --\x3e|Tap Cart Icon| H[Navigate to CartScreen]\r\n    H --\x3e I[CartScreen]\r\n    I --\x3e J{User Action in Cart}\r\n    J --\x3e|Adjust Quantity| K[Update CartProvider]\r\n    K --\x3e L[Recalculate Total]\r\n    L --\x3e I\r\n    J --\x3e|Remove Item| M[Update CartProvider]\r\n    M --\x3e L\r\n    J --\x3e|Continue Shopping| N[Navigate back to ProductListScreen]\r\n    N --\x3e C\r\n    J --\x3e|Checkout| O[Process Order]\r\n    O --\x3e P[Order Confirmation]\r\n    P --\x3e Q[End]\r\n\r\n    subgraph "CartProvider"\r\n        R[Current Cart State]\r\n        S[Add Product]\r\n        T[Update Quantity]\r\n        U[Remove Product]\r\n        V[Calculate Total]\r\n    end\r\n\r\n    E --\x3e S\r\n    G --\x3e T\r\n    K --\x3e T\r\n    M --\x3e U\r\n    I --\x3e V'}),"\n",(0,t.jsx)(e.p,{children:"Penjelasan diagram:"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsxs)(e.li,{children:["Aplikasi dimulai dan pengguna membuka ",(0,t.jsx)(e.code,{children:"ProductListPage"}),"."]}),"\n",(0,t.jsxs)(e.li,{children:["Di ",(0,t.jsx)(e.code,{children:"ProductListPage"}),", pengguna memiliki beberapa pilihan:","\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Melihat produk"}),"\n",(0,t.jsx)(e.li,{children:"Menambahkan produk ke keranjang"}),"\n",(0,t.jsx)(e.li,{children:"Mengatur kuantitas produk"}),"\n",(0,t.jsxs)(e.li,{children:["Membuka ",(0,t.jsx)(e.code,{children:"CartPage"})]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["Setiap kali pengguna melakukan aksi yang berhubungan dengan keranjang (menambah, mengubah kuantitas), ",(0,t.jsx)(e.code,{children:"CartProvider"})," diperbarui dan badge keranjang di-update."]}),"\n",(0,t.jsxs)(e.li,{children:["Ketika pengguna membuka ",(0,t.jsx)(e.code,{children:"CartPage"}),", mereka dapat:","\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Mengatur kuantitas item di keranjang"}),"\n",(0,t.jsx)(e.li,{children:"Menghapus item dari keranjang"}),"\n",(0,t.jsxs)(e.li,{children:["Kembali ke ",(0,t.jsx)(e.code,{children:"ProductListPage"})," untuk lanjut berbelanja"]}),"\n",(0,t.jsx)(e.li,{children:"Melanjutkan ke proses checkout (tidak diimplementasikan dalam contoh kode kita)"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"CartProvider"})," bertanggung jawab untuk mengelola state keranjang, termasuk menambah produk, mengupdate kuantitas, menghapus produk, dan menghitung total."]}),"\n",(0,t.jsxs)(e.li,{children:["Setiap perubahan pada ",(0,t.jsx)(e.code,{children:"CartProvider"})," akan memicu pembaruan UI di ",(0,t.jsx)(e.code,{children:"ProductListPage"})," (badge keranjang) dan ",(0,t.jsx)(e.code,{children:"CartPage"})," (daftar item dan total)."]}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:"Diagram ini memberikan gambaran visual yang jelas tentang alur aplikasi dan bagaimana berbagai komponen berinteraksi satu sama lain. Ini membantu dalam memahami arsitektur aplikasi dan aliran data antara berbagai bagian aplikasi."}),"\n",(0,t.jsx)(e.h3,{id:"diagram-alur-proses-coding-shopping-cart",children:"Diagram Alur Proses Coding Shopping Cart"}),"\n",(0,t.jsx)(e.mermaid,{value:"graph TD\r\n    A[Start] --\x3e B[Tambah Package Dependency / Dev Dependency]\r\n    B --\x3e C[Buat class model Product]\r\n    C --\x3e D[Jalankan dart run build_runner watch]\r\n    D --\x3e E[Buat data product dummy]\r\n    E --\x3e F[Buat sealed class result]\r\n    F --\x3e G[Buat chart provider]\r\n    G --\x3e H[Buat product list page]\r\n    H --\x3e I[Buat chart page]\r\n    I --\x3e J[Ubah main.dart]\r\n    J --\x3e K[Selesai]\r\n\r\n"}),"\n",(0,t.jsx)(e.h3,{id:"1-tambah-package-yang-diperlukan",children:"1. Tambah Package yang diperlukan"}),"\n",(0,t.jsx)(e.admonition,{title:"TIP",type:"tip",children:(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["Tekan Ctrl + Shift + P, kemudian ketik ",(0,t.jsx)(e.code,{children:"Add Dependency"}),", kemudian ketik package-package untuk ",(0,t.jsx)(e.code,{children:"Dependency"})]}),"\n",(0,t.jsxs)(e.li,{children:["Tekan Ctrl + Shift + P, kemudian ketik ",(0,t.jsx)(e.code,{children:"Add Dev Dependency"}),", kemudian ketik package-package untuk ",(0,t.jsx)(e.code,{children:"Dev Dependency"})]}),"\n"]})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-yaml",metastring:'title="pubspec.yaml"',children:"## kode sebelumnya\r\ndependencies:\r\n  flutter:\r\n    sdk: flutter\r\n\r\n  cupertino_icons: ^1.0.6\r\n  // highlight-start\r\n  freezed_annotation: ^2.4.3\r\n  flutter_riverpod: ^2.5.1\r\n  json_annotation: ^4.9.0\r\n  riverpod_annotation: ^2.3.5\r\n  // highlight-end\r\n\r\ndev_dependencies:\r\n  flutter_test:\r\n    sdk: flutter\r\n\r\n  flutter_lints: ^3.0.0\r\n  // highlight-start\r\n  build_runner: ^2.4.11\r\n  freezed: ^2.5.2\r\n  riverpod_generator: ^2.4.0\r\n  riverpod_lint: ^2.3.10\r\n  custom_lint: ^0.6.4\r\n  json_serializable: ^6.8.0\r\n  // highlight-end\r\n## kode sesudahnya\n"})}),"\n",(0,t.jsx)(e.h3,{id:"2-buat-class-model-product",children:"2. Buat class model Product"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-dart",metastring:'title="lib/models/product.dart"',children:"import 'package:freezed_annotation/freezed_annotation.dart';\r\n\r\npart 'product.freezed.dart';\r\npart 'product.g.dart';\r\n\r\n@freezed\r\nclass Product with _$Product {\r\n  const factory Product({\r\n    required String id,\r\n    required String name,\r\n    required double price,\r\n    @Default(0) int quantity,\r\n  }) = _Product;\r\n\r\n  factory Product.fromJson(Map<String, dynamic> json) =>\r\n      _$ProductFromJson(json);\r\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"3-jalankan-dart-run-build_runner-watch",children:"3. Jalankan dart run build_runner watch"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"dart run build_runner watch\n"})}),"\n",(0,t.jsx)(e.h3,{id:"4-buat-data-product-dummy",children:"4. Buat data product dummy"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-dart",metastring:'title="lib/data/dummy_products.dart"',children:"import '../models/product.dart';\r\n\r\nfinal List<Product> dummyProducts = [\r\n  Product(id: '1', name: 'Laptop', price: 999.99),\r\n  Product(id: '2', name: 'Smartphone', price: 499.99),\r\n  Product(id: '3', name: 'Headphones', price: 99.99),\r\n  Product(id: '4', name: 'Tablet', price: 299.99),\r\n  Product(id: '5', name: 'Smartwatch', price: 199.99),\r\n  Product(id: '6', name: 'Camera', price: 599.99),\r\n  Product(id: '7', name: 'Bluetooth Speaker', price: 79.99),\r\n  Product(id: '8', name: 'Gaming Console', price: 399.99),\r\n  Product(id: '9', name: 'Wireless Earbuds', price: 129.99),\r\n  Product(id: '10', name: 'External Hard Drive', price: 89.99),\r\n];\n"})}),"\n",(0,t.jsx)(e.h3,{id:"5-buat-sealed-class-result",children:"5. Buat sealed class result"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-dart",metastring:'title="lib/core/result.dart"',children:"sealed class Result<T> {\r\n  const Result();\r\n\r\n  const factory Result.success(T value) = Success;\r\n  const factory Result.failed(String message) = Failed;\r\n\r\n  bool get isSuccess => this is Success<T>;\r\n  bool get isFailed => this is Failed<T>;\r\n\r\n  T? get resultValue => isSuccess ? (this as Success<T>).value : null;\r\n  String? get errorMessage => isFailed ? (this as Failed<T>).message : null;\r\n}\r\n\r\nclass Success<T> extends Result<T> {\r\n  const Success(this.value);\r\n\r\n  final T value;\r\n}\r\n\r\nclass Failed<T> extends Result<T> {\r\n  const Failed(this.message);\r\n\r\n  final String message;\r\n}\r\n\n"})}),"\n",(0,t.jsx)(e.h3,{id:"6-buat-chart-provider",children:"6. Buat chart provider"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-dart",metastring:'title="lib/providers/chart_provider.dart"',children:'import \'package:riverpod_annotation/riverpod_annotation.dart\';\r\nimport \'../models/product.dart\';\r\nimport \'../core/result.dart\';\r\n\r\npart \'cart_provider.g.dart\';\r\n\r\n@riverpod\r\nclass Cart extends _$Cart {\r\n  @override\r\n  Future<Result<List<Product>>> build() async {\r\n    try {\r\n      // Simulate fetching initial cart data from an API or database\r\n      await Future.delayed(Duration(seconds: 1));\r\n      return Result.success([]);\r\n    } catch (e) {\r\n      return Result.failed("Failed to initialize cart: $e");\r\n    }\r\n  }\r\n\r\n  Future<Result<List<Product>>> addProduct(Product product) async {\r\n    try {\r\n      final currentResult = await future;\r\n      if (currentResult.isFailed) {\r\n        return Result.failed(currentResult.errorMessage!);\r\n      }\r\n      final currentProducts = currentResult.resultValue!;\r\n      final existingProductIndex =\r\n          currentProducts.indexWhere((p) => p.id == product.id);\r\n\r\n      if (existingProductIndex != -1) {\r\n        // Product already exists, increase quantity\r\n        final updatedProducts = [...currentProducts];\r\n        updatedProducts[existingProductIndex] =\r\n            updatedProducts[existingProductIndex].copyWith(\r\n          quantity: updatedProducts[existingProductIndex].quantity + 1,\r\n        );\r\n        state = AsyncValue.data(Result.success(updatedProducts));\r\n        return Result.success(updatedProducts);\r\n      } else {\r\n        // Add new product with quantity 1\r\n        final updatedProducts = [\r\n          ...currentProducts,\r\n          product.copyWith(quantity: 1)\r\n        ];\r\n        state = AsyncValue.data(Result.success(updatedProducts));\r\n        return Result.success(updatedProducts);\r\n      }\r\n    } catch (e) {\r\n      return Result.failed("Failed to add product: $e");\r\n    }\r\n  }\r\n\r\n  Future<Result<List<Product>>> removeProduct(String productId) async {\r\n    try {\r\n      final currentResult = await future;\r\n      if (currentResult.isFailed) {\r\n        return Result.failed(currentResult.errorMessage!);\r\n      }\r\n      final currentProducts = currentResult.resultValue!;\r\n      final updatedProducts =\r\n          currentProducts.where((p) => p.id != productId).toList();\r\n      state = AsyncValue.data(Result.success(updatedProducts));\r\n      return Result.success(updatedProducts);\r\n    } catch (e) {\r\n      return Result.failed("Failed to remove product: $e");\r\n    }\r\n  }\r\n\r\n  Future<Result<List<Product>>> updateQuantity(\r\n      String productId, int newQuantity) async {\r\n    try {\r\n      final currentResult = await future;\r\n      if (currentResult.isFailed) {\r\n        return Result.failed(currentResult.errorMessage!);\r\n      }\r\n      final currentProducts = currentResult.resultValue!;\r\n      List<Product> updatedProducts;\r\n      if (newQuantity <= 0) {\r\n        // Remove the product if quantity is 0 or less\r\n        updatedProducts =\r\n            currentProducts.where((p) => p.id != productId).toList();\r\n      } else {\r\n        updatedProducts = currentProducts.map((p) {\r\n          if (p.id == productId) {\r\n            return p.copyWith(quantity: newQuantity);\r\n          }\r\n          return p;\r\n        }).toList();\r\n      }\r\n      state = AsyncValue.data(Result.success(updatedProducts));\r\n      return Result.success(updatedProducts);\r\n    } catch (e) {\r\n      return Result.failed("Failed to update quantity: $e");\r\n    }\r\n  }\r\n\r\n  Future<Result<double>> getTotalPrice() async {\r\n    try {\r\n      final currentResult = await future;\r\n      if (currentResult.isFailed) {\r\n        return Result.failed(currentResult.errorMessage!);\r\n      }\r\n      final products = currentResult.resultValue!;\r\n      final total = products.fold(\r\n          0.0, (sum, product) => sum + (product.price * product.quantity));\r\n      return Result.success(total);\r\n    } catch (e) {\r\n      return Result.failed("Failed to calculate total price: $e");\r\n    }\r\n  }\r\n}\n'})}),"\n",(0,t.jsx)(e.p,{children:"Penjelasan tentang kode di atas:"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsxs)(e.li,{children:["Kita menggunakan anotasi ",(0,t.jsx)(e.code,{children:"@riverpod"})," untuk membuat ",(0,t.jsx)(e.code,{children:"AsyncNotifierProvider"}),"."]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"Class Cart"})," meng-",(0,t.jsx)(e.code,{children:"extend \\_$Cart"})," yang akan di-generate oleh Riverpod Generator."]}),"\n",(0,t.jsxs)(e.li,{children:["Method ",(0,t.jsx)(e.code,{children:"build()"})," mengembalikan ",(0,t.jsx)(e.code,{children:"Future<List<Product>>"})," yang merepresentasikan state awal keranjang."]}),"\n",(0,t.jsxs)(e.li,{children:["Kita menambahkan beberapa method untuk memanipulasi keranjang:","\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"addProduct()"}),": Menambahkan produk ke keranjang atau meningkatkan kuantitas jika sudah ada."]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"removeProduct()"}),": Menghapus produk dari keranjang."]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"updateQuantity()"}),": Mengubah kuantitas produk dalam keranjang."]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"getTotalPrice()"}),": Menghitung total harga semua produk dalam keranjang."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(e.li,{children:"Setiap method menggunakan state untuk memperbarui dan membaca data keranjang."}),"\n",(0,t.jsx)(e.li,{children:"Kita menggunakan AsyncValue untuk menangani loading state dan error."}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"7-buat-product-list-page",children:"7. Buat product list page"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-dart",metastring:'title="lib/pages/product_list_page.dart"',children:"import 'package:flutter/material.dart';\r\nimport 'package:flutter_riverpod/flutter_riverpod.dart';\r\nimport '../providers/cart_provider.dart';\r\nimport '../data/dummy_products.dart';\r\nimport '../core/result.dart';\r\n\r\nclass ProductListPage extends ConsumerWidget {\r\n  const ProductListPage({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context, WidgetRef ref) {\r\n    return Scaffold(\r\n      appBar: AppBar(\r\n        title: const Text('Product List'),\r\n        actions: [\r\n          Stack(\r\n            alignment: Alignment.center,\r\n            children: [\r\n              IconButton(\r\n                icon: const Icon(Icons.shopping_cart),\r\n                onPressed: () {\r\n                  Navigator.pushNamed(context, '/cart');\r\n                },\r\n              ),\r\n              Positioned(\r\n                right: 8,\r\n                top: 8,\r\n                child: Consumer(\r\n                  builder: (context, ref, _) {\r\n                    final cartAsync = ref.watch(cartProvider);\r\n                    return cartAsync.when(\r\n                      data: (result) {\r\n                        if (result.isSuccess) {\r\n                          int totalItems = result.resultValue!\r\n                              .fold(0, (sum, item) => sum + item.quantity);\r\n                          return Badge(\r\n                            label: Text('$totalItems'),\r\n                            isLabelVisible: totalItems > 0,\r\n                          );\r\n                        } else {\r\n                          return const SizedBox.shrink();\r\n                        }\r\n                      },\r\n                      loading: () => const SizedBox.shrink(),\r\n                      error: (_, __) => const SizedBox.shrink(),\r\n                    );\r\n                  },\r\n                ),\r\n              ),\r\n            ],\r\n          ),\r\n        ],\r\n      ),\r\n      body: ListView.builder(\r\n        itemCount: dummyProducts.length,\r\n        itemBuilder: (context, index) {\r\n          final product = dummyProducts[index];\r\n          return Card(\r\n            margin: const EdgeInsets.all(8),\r\n            child: Padding(\r\n              padding: const EdgeInsets.all(16),\r\n              child: Column(\r\n                crossAxisAlignment: CrossAxisAlignment.start,\r\n                children: [\r\n                  Text(product.name,\r\n                      style: Theme.of(context)\r\n                          .textTheme\r\n                          .titleLarge), // Updated from headline6\r\n                  const SizedBox(height: 8),\r\n                  Text('\\$${product.price.toStringAsFixed(2)}',\r\n                      style: Theme.of(context)\r\n                          .textTheme\r\n                          .titleMedium), // Updated from subtitle1\r\n                  const SizedBox(height: 16),\r\n                  Row(\r\n                    children: [\r\n                      ElevatedButton(\r\n                        child: const Text('Add to Cart'),\r\n                        onPressed: () async {\r\n                          final result = await ref\r\n                              .read(cartProvider.notifier)\r\n                              .addProduct(product);\r\n                          if (result.isSuccess) {\r\n                            ScaffoldMessenger.of(context).showSnackBar(\r\n                              SnackBar(\r\n                                  content:\r\n                                      Text('${product.name} added to cart')),\r\n                            );\r\n                          } else {\r\n                            ScaffoldMessenger.of(context).showSnackBar(\r\n                              SnackBar(\r\n                                  content: Text(\r\n                                      'Failed to add to cart: ${result.errorMessage}')),\r\n                            );\r\n                          }\r\n                        },\r\n                      ),\r\n                      const SizedBox(width: 16),\r\n                      Consumer(\r\n                        builder: (context, ref, _) {\r\n                          final cartAsync = ref.watch(cartProvider);\r\n                          return cartAsync.when(\r\n                            data: (result) {\r\n                              if (result.isSuccess) {\r\n                                final cartItem = result.resultValue!.firstWhere(\r\n                                  (item) => item.id == product.id,\r\n                                  orElse: () => product.copyWith(quantity: 0),\r\n                                );\r\n                                return Row(\r\n                                  children: [\r\n                                    IconButton(\r\n                                      icon: const Icon(Icons.remove),\r\n                                      onPressed: cartItem.quantity > 0\r\n                                          ? () => ref\r\n                                              .read(cartProvider.notifier)\r\n                                              .updateQuantity(product.id,\r\n                                                  cartItem.quantity - 1)\r\n                                          : null,\r\n                                    ),\r\n                                    Text('${cartItem.quantity}'),\r\n                                    IconButton(\r\n                                      icon: const Icon(Icons.add),\r\n                                      onPressed: () => ref\r\n                                          .read(cartProvider.notifier)\r\n                                          .updateQuantity(product.id,\r\n                                              cartItem.quantity + 1),\r\n                                    ),\r\n                                  ],\r\n                                );\r\n                              } else {\r\n                                return Text('Error: ${result.errorMessage}');\r\n                              }\r\n                            },\r\n                            loading: () => const CircularProgressIndicator(),\r\n                            error: (_, __) => const Text('Error'),\r\n                          );\r\n                        },\r\n                      ),\r\n                    ],\r\n                  ),\r\n                ],\r\n              ),\r\n            ),\r\n          );\r\n        },\r\n      ),\r\n    );\r\n  }\r\n}\r\n\n"})}),"\n",(0,t.jsx)(e.h3,{id:"8-buat-chart-page",children:"8. Buat chart page"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-dart",metastring:'title="lib/pages/chart_page.dart"',children:"import 'package:flutter/material.dart';\r\nimport 'package:flutter_riverpod/flutter_riverpod.dart';\r\nimport '../providers/cart_provider.dart';\r\nimport '../core/result.dart';\r\n\r\nclass CartPage extends ConsumerWidget {\r\n  @override\r\n  Widget build(BuildContext context, WidgetRef ref) {\r\n    final cartAsync = ref.watch(cartProvider);\r\n\r\n    return Scaffold(\r\n      appBar: AppBar(\r\n        title: Text('Shopping Cart'),\r\n      ),\r\n      body: cartAsync.when(\r\n        data: (result) {\r\n          if (result.isSuccess) {\r\n            final cart = result.resultValue!;\r\n            if (cart.isEmpty) {\r\n              return Center(child: Text('Your cart is empty'));\r\n            }\r\n            return ListView.builder(\r\n              itemCount: cart.length,\r\n              itemBuilder: (context, index) {\r\n                final product = cart[index];\r\n                return ListTile(\r\n                  title: Text(product.name),\r\n                  subtitle: Text(\r\n                      '\\$${(product.price * product.quantity).toStringAsFixed(2)}'),\r\n                  trailing: Row(\r\n                    mainAxisSize: MainAxisSize.min,\r\n                    children: [\r\n                      IconButton(\r\n                        icon: Icon(Icons.remove),\r\n                        onPressed: () async {\r\n                          await ref\r\n                              .read(cartProvider.notifier)\r\n                              .updateQuantity(product.id, product.quantity - 1);\r\n                        },\r\n                      ),\r\n                      Text('${product.quantity}'),\r\n                      IconButton(\r\n                        icon: Icon(Icons.add),\r\n                        onPressed: () async {\r\n                          await ref\r\n                              .read(cartProvider.notifier)\r\n                              .updateQuantity(product.id, product.quantity + 1);\r\n                        },\r\n                      ),\r\n                    ],\r\n                  ),\r\n                );\r\n              },\r\n            );\r\n          } else {\r\n            return Center(child: Text('Error: ${result.errorMessage}'));\r\n          }\r\n        },\r\n        loading: () => Center(child: CircularProgressIndicator()),\r\n        error: (error, stack) => Center(child: Text('Error: $error')),\r\n      ),\r\n      bottomNavigationBar: cartAsync.when(\r\n        data: (result) => Container(\r\n          padding: EdgeInsets.all(16),\r\n          child: Consumer(\r\n            builder: (context, ref, _) {\r\n              return FutureBuilder<Result<double>>(\r\n                future: ref.read(cartProvider.notifier).getTotalPrice(),\r\n                builder: (context, snapshot) {\r\n                  if (snapshot.connectionState == ConnectionState.waiting) {\r\n                    return CircularProgressIndicator();\r\n                  }\r\n                  if (snapshot.hasError) {\r\n                    return Text('Error: ${snapshot.error}');\r\n                  }\r\n                  if (snapshot.hasData) {\r\n                    final result = snapshot.data!;\r\n                    if (result.isSuccess) {\r\n                      return Text(\r\n                        'Total: \\$${result.resultValue!.toStringAsFixed(2)}',\r\n                        style: Theme.of(context).textTheme.titleLarge,\r\n                      );\r\n                    } else {\r\n                      return Text('Error: ${result.errorMessage}');\r\n                    }\r\n                  }\r\n                  return SizedBox.shrink();\r\n                },\r\n              );\r\n            },\r\n          ),\r\n        ),\r\n        loading: () => SizedBox.shrink(),\r\n        error: (_, __) => SizedBox.shrink(),\r\n      ),\r\n    );\r\n  }\r\n}\n"})}),"\n",(0,t.jsx)(e.h3,{id:"9-ubah-maindart",children:"9. Ubah main.dart"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-dart",metastring:'title="main.dart"',children:"import 'package:flutter/material.dart';\r\nimport 'package:flutter_riverpod/flutter_riverpod.dart';\r\nimport 'pages/product_list_page.dart';\r\nimport 'pages/cart_page.dart';\r\n\r\nvoid main() {\r\n  runApp(\r\n    ProviderScope(\r\n      child: MyApp(),\r\n    ),\r\n  );\r\n}\r\n\r\nclass MyApp extends StatelessWidget {\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return MaterialApp(\r\n      title: 'Shopping App',\r\n      theme: ThemeData(\r\n        primarySwatch: Colors.blue,\r\n        visualDensity: VisualDensity.adaptivePlatformDensity,\r\n      ),\r\n      initialRoute: '/',\r\n      routes: {\r\n        '/': (context) => const ProductListPage(),\r\n        '/cart': (context) => CartPage(),\r\n      },\r\n    );\r\n  }\r\n}\n"})})]})}function l(r={}){const{wrapper:e}={...(0,a.R)(),...r.components};return e?(0,t.jsx)(e,{...r,children:(0,t.jsx)(c,{...r})}):c(r)}},8453:(r,e,n)=>{n.d(e,{R:()=>d,x:()=>s});var t=n(6540);const a={},i=t.createContext(a);function d(r){const e=t.useContext(i);return t.useMemo((function(){return"function"==typeof r?r(e):{...e,...r}}),[e,r])}function s(r){let e;return e=r.disableParentContext?"function"==typeof r.components?r.components(a):r.components||a:d(r.components),t.createElement(i.Provider,{value:e},r.children)}}}]);